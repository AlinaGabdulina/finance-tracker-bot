package com.lina.finance_tracker_bot.services;

import com.lina.finance_tracker_bot.bot.MessageSender;
import com.lina.finance_tracker_bot.modelSqlLite.Notification;
import com.lina.finance_tracker_bot.modelSqlLite.User;
import com.lina.finance_tracker_bot.repository.NotificationRepository;
import jakarta.transaction.Transactional;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.time.LocalTime;
import java.time.format.DateTimeParseException;
import java.util.List;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
@Service
public class NotificationService {
    private final NotificationRepository notificationRepository;
    private final UserInfoService userInfoService;
    private final MessageSender messageSender;
    private final UserStateService userStateService;

    public NotificationService(NotificationRepository notificationRepository,
                               UserInfoService userInfoService,
                               MessageSender messageSender,
                               UserStateService userStateService) {
        this.notificationRepository = notificationRepository;
        this.userInfoService = userInfoService;
        this.messageSender = messageSender;
        this.userStateService = userStateService;
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param chatId ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏
     */
    public String showUserNotifications(Long chatId) {
        LocalTime now = LocalTime.now().withSecond(0).withNano(0);
        List<Notification> notifications = notificationRepository
                .findActiveByUserChatIdOrderByNotificationTimeAsc(chatId, now);

        if (notifications.isEmpty()) {
            return "üìã –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n" +
                    "üí° –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"–°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\".";
        }

        StringBuilder sb = new StringBuilder("üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n\n");
        for (int i = 0; i < notifications.size(); i++) {
            Notification n = notifications.get(i);
            sb.append(i + 1).append(". ‚è∞ ")
                    .append(n.getNotificationTime().format(UserStateService.TIME_FORMATTER))
                    .append(" - ").append(n.getMessage()).append("\n");
        }

        sb.append("\nüí° –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ").append(notifications.size());
        sb.append("\nüóëÔ∏è –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"–£–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\"");
        return sb.toString();
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param chatId ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param messageText —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ "/notify HH:mm –¢–µ–∫—Å—Ç"
     * @param username –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    public String handleNotifyCommand(Long chatId, String messageText, String username) {
        try {
            User user = userInfoService.getOrCreateUser(chatId, username);

            String[] parts = messageText.trim().split("\\s+", 3);
            if (parts.length < 3) {
                return showUserNotifications(chatId);
            }

            LocalTime time;
            try {
                time = LocalTime.parse(parts[1], UserStateService.TIME_FORMATTER);
            } catch (DateTimeParseException e) {
                return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: HH:mm (–Ω–∞–ø—Ä–∏–º–µ—Ä: 20:30)";
            }

            LocalTime now = LocalTime.now();
            if (time.isBefore(now)) {
                return "‚ùå –ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è!\n" +
                        "‚è∞ –°–µ–π—á–∞—Å: " + now.format(UserStateService.TIME_FORMATTER) +
                        "\nüìÖ –í—ã —É–∫–∞–∑–∞–ª–∏: " + time.format(UserStateService.TIME_FORMATTER);
            }

            String notificationMessage = parts[2];
            Notification notification = new Notification(time, notificationMessage, user);
            notificationRepository.save(notification);

            return "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n" +
                    "‚è∞ –í—Ä–µ–º—è: " + time.format(UserStateService.TIME_FORMATTER) + "\n" +
                    "üìù –¢–µ–∫—Å—Ç: " + notificationMessage + "\n\n" +
                    showUserNotifications(chatId);

        } catch (Exception e) {
            return "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: " + e.getMessage();
        }
    }

    /**
     * –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
     * @param chatId ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param username –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
     */
    public String handleDeleteNotificationCommand(Long chatId, String username) {
        try {
            LocalTime now = LocalTime.now().withSecond(0).withNano(0);
            List<Notification> notifications = notificationRepository
                    .findActiveByUserChatIdOrderByNotificationTimeAsc(chatId, now);

            if (notifications.isEmpty()) {
                return "üìã –£ –≤–∞—Å –Ω–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è";
            }

            StringBuilder notificationsList = new StringBuilder("üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n");
            for (int i = 0; i < notifications.size(); i++) {
                Notification n = notifications.get(i);
                notificationsList.append((i + 1))
                        .append(". ‚è∞ ")
                        .append(n.getNotificationTime().format(UserStateService.TIME_FORMATTER))
                        .append(" - ")
                        .append(n.getMessage())
                        .append("\n");
            }

            notificationsList.append("\nüí° –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–æ–º–µ—Ä–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è");
            userStateService.setAwaitingNotificationDeletion(chatId);

            return notificationsList.toString();

        } catch (Exception e) {
            return "‚ùå –û—à–∏–±–∫–∞: " + e.getMessage();
        }
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     * @param chatId ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param notificationNumber –Ω–æ–º–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
     * @param username –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    public String handleNotificationSelection(Long chatId, int notificationNumber, String username) {
        try {
            if (!userStateService.isAwaitingNotificationDeletion(chatId)) {
                return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è";
            }

            userStateService.clearAwaitingNotificationDeletion(chatId);

            LocalTime now = LocalTime.now().withSecond(0).withNano(0);
            List<Notification> notifications = notificationRepository
                    .findActiveByUserChatIdOrderByNotificationTimeAsc(chatId, now);

            if (notificationNumber < 1 || notificationNumber > notifications.size()) {
                return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è";
            }

            Notification selectedNotification = notifications.get(notificationNumber - 1);
            notificationRepository.delete(selectedNotification);

            String result = "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!\n" +
                    "‚è∞ –ë—ã–ª–æ: " + selectedNotification.getNotificationTime().format(UserStateService.TIME_FORMATTER) +
                    " - " + selectedNotification.getMessage();

            List<Notification> updatedNotifications = notificationRepository
                    .findActiveByUserChatIdOrderByNotificationTimeAsc(chatId, LocalTime.now().withSecond(0).withNano(0));

            if (updatedNotifications.isEmpty()) {
                result += "\nüìã –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –Ω–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π";
            } else {
                result += "\n\n" + showUserNotifications(chatId);
            }

            return result;

        } catch (Exception e) {
            userStateService.clearAwaitingNotificationDeletion(chatId);
            return "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: " + e.getMessage();
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –≤—Ä–µ–º—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Å—Ç—É–ø–∏–ª–æ
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
     */
    @Scheduled(fixedRate = 60000)
    @Transactional
    public void checkAndSendNotifications() {
        try {
            LocalTime currentTime = LocalTime.now().withSecond(0).withNano(0);
            List<Notification> notificationsToSend = notificationRepository.findNotificationsByTime(currentTime);

            for (Notification notification : notificationsToSend) {
                String message = "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (" + notification.getNotificationTime().format(UserStateService.TIME_FORMATTER) + "):\n" +
                        notification.getMessage();

                messageSender.sendTextWithTtl(
                        notification.getUser().getChatId(),
                        message,
                        MessageSender.REMINDER_TTL
                );

                notificationRepository.delete(notification);
            }

        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: " + e.getMessage());
        }
    }
}