package com.lina.finance_tracker_bot.services;

import com.lina.finance_tracker_bot.bot.MessageSender;
import com.lina.finance_tracker_bot.exeptions.FinanceTrackerException;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤.
 * –ü–æ–ª—É—á–∞–µ—Ç —Ñ–∞–∫—Ç—ã —Å –≤–Ω–µ—à–Ω–µ–≥–æ —Ä–µ—Å—É—Ä—Å–∞, –ø–∞—Ä—Å–∏—Ç –∏—Ö –∏–∑ HTML –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
 * –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–∞—Ä–∞–Ω–µ–µ –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–ø–∞—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã.
 */
@Service
public class FactService {

    private final FactClient factClient; // –ö–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Ñ–∞–∫—Ç–æ–º
    private final MessageSender messageSender; // –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º

    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å–µ—Ä–≤–∏—Å–∞.
     *
     * @param factClient –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è HTML —Å —Ñ–∞–∫—Ç–æ–º
     * @param messageSender —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    public FactService(FactClient factClient, MessageSender messageSender) {
        this.factClient = factClient;
        this.messageSender = messageSender;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç —Å –≤–Ω–µ—à–Ω–µ–≥–æ —Å–∞–π—Ç–∞.
     * –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–ø–∞—Å–Ω–æ–π —Ñ–∞–∫—Ç.
     *
     * @return –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Ñ–∞–∫—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     */
    public String getRandomFact() {
        try {
            String html = factClient.getFactHtml();
            return parseFactFromHtmlManual(html);
        } catch (FinanceTrackerException e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–∫—Ç–∞: " + e.getMessage());
            return getBackupFact();
        }
    }

    /**
     * –ü–∞—Ä—Å–∏—Ç —Ñ–∞–∫—Ç –∏–∑ HTML-–∫–æ–¥–∞ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π.
     * –ò—â–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã —Å –∫–ª–∞—Å—Å–æ–º "text".
     *
     * @param html HTML-–∫–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Ñ–∞–∫—Ç–æ–º
     * @return –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π –∏ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–∫—Ç –∏–ª–∏ –∑–∞–ø–∞—Å–Ω–æ–π —Ñ–∞–∫—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
     */
    private String parseFactFromHtmlManual(String html) {
        try {
            Pattern pattern = Pattern.compile(
                    "<table class=\"text\">\\s*<tbody>\\s*<tr>\\s*<td>\\s*\"?(.*?)\"?\\s*</td>",
                    Pattern.DOTALL
            );
            Matcher matcher = pattern.matcher(html);

            if (matcher.find()) {
                String fact = matcher.group(1).trim();
                if (!fact.isEmpty()) {
                    return formatFact(fact);
                }
            }

            // –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª ‚Äî –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
            return findFactAlternative(html);

        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–∫—Ç–∞: " + e.getMessage());
            return getBackupFact();
        }
    }

    /**
     * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ —Ñ–∞–∫—Ç–∞ –≤ HTML-–∫–æ–¥–µ.
     * –ü—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ —Ñ–∞–∫—Ç –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∏–ª–∏ –ª—é–±–æ–º—É –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É –≤ —Ç–µ–≥–µ <td>.
     *
     * @param html HTML-–∫–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     * @return –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ñ–∞–∫—Ç –∏–ª–∏ –∑–∞–ø–∞—Å–Ω–æ–π —Ñ–∞–∫—Ç –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ
     */
    private String findFactAlternative(String html) {
        try {
            // –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏—é "–§–∞–∫—Ç –¥–Ω—è:"
            if (html.contains("–§–∞–∫—Ç –¥–Ω—è:")) {
                int start = html.indexOf("–§–∞–∫—Ç –¥–Ω—è:") + "–§–∞–∫—Ç –¥–Ω—è:".length();
                int end = html.indexOf("</td>", start);
                if (end > start) {
                    String fact = html.substring(start, end).trim();
                    fact = fact.replaceAll("<[^>]*>", "").trim();
                    if (!fact.isEmpty()) {
                        return formatFact(fact);
                    }
                }
            }

            // –ü–æ–∏—Å–∫ –ª—é–±–æ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ —Ç–µ–≥–µ <td>
            Pattern altPattern = Pattern.compile("<td>\\s*([^<]+?)\\s*</td>", Pattern.DOTALL);
            Matcher altMatcher = altPattern.matcher(html);

            while (altMatcher.find()) {
                String candidate = altMatcher.group(1).trim();
                if (candidate.length() > 20 && !candidate.contains("script")) {
                    return formatFact(candidate);
                }
            }

        } catch (Exception e) {
            System.err.println("–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: " + e.getMessage());
        }

        return getBackupFact();
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Ñ–∞–∫—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
     * –£–±–∏—Ä–∞–µ—Ç –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –æ—Ñ–æ—Ä–º–ª—è—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã.
     *
     * @param fact –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç —Ñ–∞–∫—Ç–∞
     * @return –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Ñ–∞–∫—Ç–∞
     */
    private String formatFact(String fact) {
        fact = fact.replaceAll("\\s+", " ").trim();
        return "üìö –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç:\n\n" + fact +
                "\n\n‚ú® –£–∑–Ω–∞–≤–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–∫—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!";
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–∏–Ω –∏–∑ –∑–∞—Ä–∞–Ω–µ–µ –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∞—Å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤.
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–æ–ª—É—á–µ–Ω–∏—è –∏–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–∫—Ç–∞.
     *
     * @return —Ç–µ–∫—Å—Ç –∑–∞–ø–∞—Å–Ω–æ–≥–æ —Ñ–∞–∫—Ç–∞ –≤ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ
     */
    private String getBackupFact() {
        List<String> backupFacts = List.of(
                "üêù –ú–µ–¥–æ–Ω–æ—Å–Ω—ã–µ –ø—á—ë–ª—ã –º–æ–≥—É—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –ª–∏—Ü–∞!",
                "üåå –ú–ª–µ—á–Ω—ã–π –ü—É—Ç—å —Å—Ç–æ–ª–∫–Ω—ë—Ç—Å—è —Å –≥–∞–ª–∞–∫—Ç–∏–∫–æ–π –ê–Ω–¥—Ä–æ–º–µ–¥—ã —á–µ—Ä–µ–∑ 4 –º–∏–ª–ª–∏–∞—Ä–¥–∞ –ª–µ—Ç",
                "üêô –£ –æ—Å—å–º–∏–Ω–æ–≥–∞ —Ç—Ä–∏ —Å–µ—Ä–¥—Ü–∞ –∏ –≥–æ–ª—É–±–∞—è –∫—Ä–æ–≤—å",
                "üìö –°–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π —Ä–æ–º–∞–Ω –≤ –º–∏—Ä–µ ‚Äî ¬´–í –ø–æ–∏—Å–∫–∞—Ö —É—Ç—Ä–∞—á–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏¬ª –ú–∞—Ä—Å–µ–ª—è –ü—Ä—É—Å—Ç–∞",
                "üß† –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –º–æ–∑–≥ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–∫–æ–ª–æ 23 –≤–∞—Ç—Ç —ç–Ω–µ—Ä–≥–∏–∏"
        );

        int randomIndex = (int) (Math.random() * backupFacts.size());
        return formatFact(backupFacts.get(randomIndex));
    }
}
