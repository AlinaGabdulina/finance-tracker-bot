package com.lina.finance_tracker_bot.services;

import com.lina.finance_tracker_bot.modelSqlLite.Transaction;
import com.lina.finance_tracker_bot.modelSqlLite.TransactionType;
import com.lina.finance_tracker_bot.modelSqlLite.User;
import com.lina.finance_tracker_bot.repository.TransactionRepository;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class AddService {
    private final TransactionRepository transactionRepository;
    private final UserInfoService userService;

    public AddService(TransactionRepository transactionRepository, UserInfoService userService) {
        this.transactionRepository = transactionRepository;
        this.userService = userService;
    }

    /**
     * –°—Ç–∞—Ä—ã–π –ø–∞—Ä—Å–µ—Ä-–∫–æ–º–∞–Ω–¥–∞ (–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
     * /add 500 –ï–¥–∞ –∏–ª–∏ /add –ï–¥–∞ 500
     */
    public String AddCommand(Long chatId, String messageText, String username) {
        try {
            // –µ—Å–ª–∏ –ø—Ä–∏—à—ë–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ "/add ..." ‚Äî –ø—Ä–æ—Å—Ç–æ–π –≤—ã–∑–æ–≤ —Ä–∞–∑–±–æ—Ä—â–∏–∫–∞
            String[] parts = messageText.trim().split("\\s+");
            if (parts.length >= 3 && parts[0].equalsIgnoreCase("/add")) {
                // –æ–∂–∏–¥–∞–µ–º: /add <amount> <category> –∏–ª–∏ /add <category> <amount>
                String first = parts[1];
                String second = parts[2];
                if (isNumeric(first)) {
                    return addExpense(chatId, second, Double.parseDouble(first), username);
                } else if (isNumeric(second)) {
                    return addExpense(chatId, first, Double.parseDouble(second), username);
                }
            }
            return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã /add. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add 500 –ï–¥–∞";
        } catch (Exception e) {
            return "‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: " + e.getMessage();
        }
    }

    /**
     * –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É (–¥–∏–∞–ª–æ–≥–æ–≤—ã–π —Ä–µ–∂–∏–º)
     */
    public String addExpense(Long chatId, String category, double amount, String username) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            User user = userService.getOrCreateUser(chatId, username);

            // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä)
            String normalizedCategory = category.toLowerCase();

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (—Ä–∞—Å—Ö–æ–¥)
            Transaction transaction = new Transaction(amount, normalizedCategory, TransactionType.EXPENSE, user);
            transactionRepository.save(transaction);

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            List<Transaction> transactions = transactionRepository.findByUserChatId(chatId);

            // –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
            java.util.Set<String> expenseCategories = new java.util.HashSet<>();
            for (Transaction t : transactions) {
                if (t.getType() == TransactionType.EXPENSE) {
                    expenseCategories.add(t.getCategory().toLowerCase());
                }
            }

            // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            StringBuilder sb = new StringBuilder();
            sb.append("‚úÖ üí∏ –†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω: ")
                    .append(String.format("%.2f", amount))
                    .append(" —Ä—É–±. (")
                    .append(capitalize(normalizedCategory))
                    .append(")\n\n");

            if (!expenseCategories.isEmpty()) {
                sb.append("üìâ –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n");
                int i = 1;
                for (String cat : expenseCategories) {
                    String displayCategory = cat.substring(0, 1).toUpperCase() + cat.substring(1);
                    sb.append("  ‚Ä¢ ").append(displayCategory).append("\n");
                }
            } else {
                sb.append("‚ùó –ü–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤.");
            }

            return sb.toString();

        } catch (Exception e) {
            return "‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞—Ç—ã: " + e.getMessage();
        }
    }



    //–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥ (–¥–∏–∞–ª–æ–≥–æ–≤—ã–π —Ä–µ–∂–∏–º)

    public String addIncome(Long chatId, String source, double amount, String username) {
        try {
            User user = userService.getOrCreateUser(chatId, username);
            String normalizedSource = source.toLowerCase();
          Transaction transaction = new Transaction(amount, normalizedSource, TransactionType.INCOME, user);
            transactionRepository.save(transaction);
      List<Transaction> transactions = transactionRepository.findByUserChatId(chatId);
        java.util.Set<String> incomeCategories = new java.util.HashSet<>();
            for (Transaction t : transactions) {
                if (t.getType() == TransactionType.INCOME) {
                    incomeCategories.add(t.getCategory().toLowerCase());
                }
            }

            StringBuilder sb = new StringBuilder();
            StringBuilder append = sb.append("‚úÖ üí∞ –î–æ—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω: ").append(String.format("%.2f", amount))
                    .append(" —Ä—É–±. (")
                    .append(capitalize(normalizedSource))
                    .append(")\n\n");

            if (!incomeCategories.isEmpty()) {
                sb.append("üìÅ –í–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤:\n");
                int i = 1;
                for (String category : incomeCategories) {
                    sb.append(i++).append(". ").append(capitalize(category)).append("\n");
                }
            } else {
                sb.append("‚ùó –ü–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Ö–æ–¥–æ–≤.");
            }

            return sb.toString();

        } catch (Exception e) {
            return "‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞: " + e.getMessage();
        }
    }


    private boolean isNumeric(String s) {
        try {
            Double.parseDouble(s.replace(",", "."));
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    private String capitalize(String s) {
        if (s == null || s.isEmpty()) return s;
        return s.substring(0, 1).toUpperCase() + s.substring(1);
    }



}