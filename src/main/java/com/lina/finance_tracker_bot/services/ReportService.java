package com.lina.finance_tracker_bot.services;

import com.lina.finance_tracker_bot.modelSqlLite.Transaction;
import com.lina.finance_tracker_bot.modelSqlLite.TransactionType;
import com.lina.finance_tracker_bot.repository.TransactionRepository;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
 */
@Service
public class ReportService {
    private final TransactionRepository transactionRepository;

    public ReportService(TransactionRepository transactionRepository) {
        this.transactionRepository = transactionRepository;
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –æ—Ç—á–µ—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ç—á–µ—Ç
     * @param chatId ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param messageText —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã
     * @return —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
     */
    public String handleReportCommand(Long chatId, String messageText) {
        if (messageText.equals("/report")) {
            return generateGeneralReport(chatId);
        } else if (messageText.equals("/report for today")) {
            return generateTodayReport(chatId);
        } else if (messageText.equals("/report for week")) {
            return generateWeekReport(chatId);
        } else if (messageText.equals("/report for the year")) {
            return generateYearReport(chatId);
        }
        return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—Ç—á–µ—Ç–∞";
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—â–∏–π –æ—Ç—á–µ—Ç –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
     * @param chatId ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return –æ—Ç—á–µ—Ç –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö
     */
    public String generateGeneralReport(Long chatId) {
        try {
            List<Transaction> transactions = transactionRepository.findByUserChatId(chatId);
            if (transactions.isEmpty()) {
                return "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π";
            }
            return formatReport(transactions, "–≤—Å–µ –≤—Ä–µ–º—è");
        } catch (Exception e) {
            return "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: " + e.getMessage();
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è
     * @param chatId ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return –æ—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö
     */
    public String generateTodayReport(Long chatId) {
        try {
            LocalDateTime startOfDay = LocalDateTime.now().toLocalDate().atStartOfDay();
            List<Transaction> todayTransactions = transactionRepository.findTodayTransactions(chatId, startOfDay);

            if (todayTransactions.isEmpty()) {
                return "üìä –ó–∞ —Å–µ–≥–æ–¥–Ω—è –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–µ—Ç";
            }
            return formatReport(todayTransactions, "—Å–µ–≥–æ–¥–Ω—è");
        } catch (Exception e) {
            return "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: " + e.getMessage();
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é
     * @param chatId ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return –æ—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö
     */
    public String generateWeekReport(Long chatId) {
        try {
            Optional<Transaction> firstTransaction = transactionRepository.findFirstByUserChatIdOrderByDateAsc(chatId);
            if (firstTransaction.isEmpty()) {
                return "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π";
            }

            long daysWithData = java.time.Duration.between(firstTransaction.get().getDate(), LocalDateTime.now()).toDays() + 1;
            if (daysWithData < 7) {
                return "üìä –£ –≤–∞—Å –≤—Å–µ–≥–æ " + daysWithData + " –¥–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö. –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ 7 –¥–Ω–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è";
            }

            LocalDateTime weekAgo = LocalDateTime.now().minusWeeks(1);
            LocalDateTime startDate = firstTransaction.get().getDate().isAfter(weekAgo) ?
                    firstTransaction.get().getDate() : weekAgo;

            List<Transaction> weekTransactions = transactionRepository.findByUserAndDateRange(chatId, startDate, LocalDateTime.now());

            if (weekTransactions.isEmpty()) {
                return "üìä –ó–∞ –Ω–µ–¥–µ–ª—é –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–µ—Ç";
            }

            long days = java.time.Duration.between(startDate, LocalDateTime.now()).toDays() + 1;
            String periodInfo = "–Ω–µ–¥–µ–ª—é (" + days + " –¥–Ω–µ–π)";
            return formatReport(weekTransactions, periodInfo);

        } catch (Exception e) {
            return "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –∑–∞ –Ω–µ–¥–µ–ª—é: " + e.getMessage();
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –∑–∞ –≥–æ–¥
     * @param chatId ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return –æ—Ç—á–µ—Ç –∑–∞ –≥–æ–¥ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö
     */
    public String generateYearReport(Long chatId) {
        try {
            Optional<Transaction> firstTransaction = transactionRepository.findFirstByUserChatIdOrderByDateAsc(chatId);
            if (firstTransaction.isEmpty()) {
                return "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π";
            }

            LocalDateTime yearAgo = LocalDateTime.now().minusYears(1);
            LocalDateTime startDate = firstTransaction.get().getDate().isAfter(yearAgo) ?
                    firstTransaction.get().getDate() : yearAgo;

            if (firstTransaction.get().getDate().isAfter(yearAgo)) {
                long daysWithData = java.time.Duration.between(firstTransaction.get().getDate(), LocalDateTime.now()).toDays() + 1;
                return "üìä –£ –≤–∞—Å –≤—Å–µ–≥–æ " + daysWithData + " –¥–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö. –ì–æ–¥–æ–≤–æ–π –æ—Ç—á–µ—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –≥–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è";
            }

            List<Transaction> yearTransactions = transactionRepository.findByUserAndDateRange(chatId, startDate, LocalDateTime.now());

            if (yearTransactions.isEmpty()) {
                return "üìä –ó–∞ –≥–æ–¥ –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–µ—Ç";
            }

            long days = java.time.Duration.between(startDate, LocalDateTime.now()).toDays() + 1;
            String periodInfo = "–≥–æ–¥ (" + days + " –¥–Ω–µ–π)";
            return formatReport(yearTransactions, periodInfo);

        } catch (Exception e) {
            return "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –∑–∞ –≥–æ–¥: " + e.getMessage();
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —á–∏—Ç–∞–µ–º—ã–π –æ—Ç—á–µ—Ç
     * @param transactions —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –æ—Ç—á–µ—Ç–∞
     * @param periodName –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç—á–µ—Ç–∞
     * @return —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
     */
    private String formatReport(List<Transaction> transactions, String periodName) {
        double totalIncome = transactions.stream()
                .filter(t -> t.getType() == TransactionType.INCOME)
                .mapToDouble(Transaction::getAmount)
                .sum();

        double totalExpense = transactions.stream()
                .filter(t -> t.getType() == TransactionType.EXPENSE)
                .mapToDouble(Transaction::getAmount)
                .sum();

        java.util.Map<String, Double> incomeByCategory = new java.util.HashMap<>();
        java.util.Map<String, Double> expenseByCategory = new java.util.HashMap<>();

        for (Transaction transaction : transactions) {
            String category = transaction.getCategory().toLowerCase();
            double amount = transaction.getAmount();

            if (transaction.getType() == TransactionType.INCOME) {
                incomeByCategory.put(category, incomeByCategory.getOrDefault(category, 0.0) + amount);
            } else {
                expenseByCategory.put(category, expenseByCategory.getOrDefault(category, 0.0) + amount);
            }
        }

        StringBuilder report = new StringBuilder();
        report.append("üìä –û—Ç—á–µ—Ç –∑–∞ ").append(periodName).append(":\n\n");
        report.append("üí∞ –î–æ—Ö–æ–¥—ã: ").append(String.format("%.2f", totalIncome)).append(" —Ä—É–±.\n");
        report.append("üí∏ –†–∞—Å—Ö–æ–¥—ã: ").append(String.format("%.2f", totalExpense)).append(" —Ä—É–±.\n");
        report.append("‚öñÔ∏è –ë–∞–ª–∞–Ω—Å: ").append(String.format("%.2f", totalIncome - totalExpense)).append(" —Ä—É–±.\n\n");

        if (!incomeByCategory.isEmpty()) {
            report.append("üìà –î–æ—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n");
            for (java.util.Map.Entry<String, Double> entry : incomeByCategory.entrySet()) {
                String category = entry.getKey();
                String displayCategory = category.substring(0, 1).toUpperCase() + category.substring(1);
                report.append("  ‚Ä¢ ").append(displayCategory).append(": ").append(String.format("%.2f", entry.getValue())).append(" —Ä—É–±.\n");
            }
            report.append("\n");
        }

        if (!expenseByCategory.isEmpty()) {
            report.append("üìâ –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n");
            for (java.util.Map.Entry<String, Double> entry : expenseByCategory.entrySet()) {
                String category = entry.getKey();
                String displayCategory = category.substring(0, 1).toUpperCase() + category.substring(1);
                report.append("  ‚Ä¢ ").append(displayCategory).append(": ").append(String.format("%.2f", entry.getValue())).append(" —Ä—É–±.\n");
            }
        }

        report.append("\n–í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: ").append(transactions.size());
        return report.toString();
    }
}