package com.lina.finance_tracker_bot.services;

import com.lina.finance_tracker_bot.modelSqlLite.Transaction;
import com.lina.finance_tracker_bot.modelSqlLite.User;
import com.lina.finance_tracker_bot.repository.TransactionRepository;
import org.springframework.stereotype.Service;

import java.util.List;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º —Ç—Ä–µ–∫–µ—Ä–µ:
 * - –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π;
 * - —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
 */
@Service
public class RemoveService {

    private final TransactionRepository transactionRepository; // –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
    private final UserInfoService userInfoService; // –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    private final UserStateService userStateService; // –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å–µ—Ä–≤–∏—Å–∞.
     *
     * @param transactionRepository —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
     * @param userInfoService —Å–µ—Ä–≤–∏—Å –ø–æ–ª—É—á–µ–Ω–∏—è/—Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     * @param userStateService —Å–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    public RemoveService(TransactionRepository transactionRepository,
                         UserInfoService userInfoService,
                         UserStateService userStateService) {
        this.transactionRepository = transactionRepository;
        this.userInfoService = userInfoService;
        this.userStateService = userStateService;
    }

    /**
     * –û—á–∏—â–∞–µ—Ç –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     *
     * @param chatId ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param username –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
     */
    public String clearCommand(Long chatId, String username) {
        try {
            User user = userInfoService.getOrCreateUser(chatId, username);
            List<Transaction> userTransactions = transactionRepository.findByUserChatId(chatId);

            if (userTransactions.isEmpty()) {
                return "üì≠ –ò—Å—Ç–æ—Ä–∏—è —É–∂–µ –ø—É—Å—Ç–∞";
            }

            transactionRepository.deleteAll(userTransactions);
            return "üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞! –£–¥–∞–ª–µ–Ω–æ " + userTransactions.size() + " –∑–∞–ø–∏—Å–µ–π";

        } catch (Exception e) {
            return "‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: " + e.getMessage();
        }
    }

    /**
     * –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
     *
     * @param chatId ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param username –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
     */
    public String deleteCommand(Long chatId, String username) {
        try {
            User user = userInfoService.getOrCreateUser(chatId, username);
            List<String> categories = getUserCategories(chatId);

            if (categories.isEmpty()) {
                return "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è";
            }

            StringBuilder categoriesList = new StringBuilder("üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n");
            for (int i = 0; i < categories.size(); i++) {
                String category = categories.get(i);
                String formattedCategory = category.substring(0, 1).toUpperCase() + category.substring(1);
                categoriesList.append((i + 1)).append(". ").append(formattedCategory).append("\n");
            }

            categoriesList.append("\nüí° –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–æ–º–µ—Ä–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è");
            userStateService.setAwaitingCategoryDeletion(chatId); // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞

            return categoriesList.toString();

        } catch (Exception e) {
            return "‚ùå –û—à–∏–±–∫–∞: " + e.getMessage();
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
     *
     * @param chatId ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param categoryNumber –Ω–æ–º–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     * @param username –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —É–¥–∞–ª–µ–Ω–∏—è
     */
    public String categorySelection(Long chatId, int categoryNumber, String username) {
        try {
            if (!userStateService.isAwaitingCategoryDeletion(chatId)) {
                return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏";
            }

            userStateService.clearAwaitingCategoryDeletion(chatId); // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è

            User user = userInfoService.getOrCreateUser(chatId, username);
            List<String> categories = getUserCategories(chatId);

            if (categoryNumber < 1 || categoryNumber > categories.size()) {
                return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏";
            }

            String selectedCategory = categories.get(categoryNumber - 1);
            List<Transaction> transactionsToDelete = transactionRepository.findByUserChatId(chatId).stream()
                    .filter(t -> t.getCategory().equalsIgnoreCase(selectedCategory))
                    .toList();

            if (!transactionsToDelete.isEmpty()) {
                transactionRepository.deleteAll(transactionsToDelete);
            }

            String formattedCategory = selectedCategory.substring(0, 1).toUpperCase() + selectedCategory.substring(1);
            String result = "‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è \"" + formattedCategory + "\" —É–¥–∞–ª–µ–Ω–∞!\n–£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: " + transactionsToDelete.size();

            List<String> updatedCategories = getUserCategories(chatId);
            if (updatedCategories.isEmpty()) {
                result += "\nüìù –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π";
            } else {
                String categoriesMessage = formatCategories(updatedCategories);
                result += "\nüìÅ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n" + categoriesMessage;
            }

            return result;

        } catch (Exception e) {
            userStateService.clearAwaitingCategoryDeletion(chatId);
            return "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: " + e.getMessage();
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     *
     * @param chatId ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
     */
    private List<String> getUserCategories(Long chatId) {
        return transactionRepository.findByUserChatId(chatId).stream()
                .map(Transaction::getCategory)
                .map(String::toLowerCase)
                .distinct()
                .toList();
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
     *
     * @param categories —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
     * @return —Å—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π
     */
    private String formatCategories(List<String> categories) {
        if (categories.isEmpty()) {
            return "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π";
        }

        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < categories.size(); i++) {
            String category = categories.get(i);
            String formattedCategory = category.substring(0, 1).toUpperCase() + category.substring(1);
            sb.append((i + 1)).append(". ").append(formattedCategory).append("\n");
        }
        return sb.toString();
    }
}
